// This file is part of midnightntwrk/example-counter.
// Copyright (C) 2025 Midnight Foundation
// SPDX-License-Identifier: Apache-2.0
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

pragma language_version 0.16;

import CompactStandardLibrary;

witness issuerSecretKey(): Bytes<32>;

export ledger issuerPublicKey: Bytes<32>;
export ledger credentialCommitment: MerkleTree<4, Bytes<32>>;

constructor() {
  issuerPublicKey = disclose(publicKey(issuerSecretKey()));
}

circuit publicKey(sk: Bytes<32>): Bytes<32> {
    return persistentHash<Vector<2, Bytes<32>>>([pad(32, "issuer"), sk]);
}

circuit checkOwner(sk: Bytes<32>): Boolean {
    assert(issuerPublicKey == publicKey(issuerSecretKey()), "you are not owner of this contract");
    return true;
}

export circuit addCredential(sk: Bytes<32>, idx: Uint<64>, handle: Bytes<32>): [] {
    checkOwner(sk);
    credentialCommitment.insertIndex(disclose(handle), disclose(idx));
}

export circuit revokeCredential(sk: Bytes<32>, idx: Uint<64>): [] {
    checkOwner(sk);
    const placeholder = pad(32, "");
    credentialCommitment.insertIndex(placeholder, disclose(idx));
}

export circuit proofNonRevoked(path: MerkleTreePath<4, Bytes<32>>, holderCredentialSecret: Bytes<32>): Boolean {
    assert(path.leaf == persistentHash<Bytes<32>>(holderCredentialSecret), "you are not holder!!!");
    return credentialCommitment.checkRoot(merkleTreePathRoot<4, Bytes<32>>(disclose(path)));
}
